// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  name         String?
  passwordHash String
  role         String       @default("user")
  customers    Customers[]  @relation("customer-user")
  categories   Categories[] @relation("category-user")
  States       States[]     @relation("state-user")
  Products     Products[]   @relation("product-user")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Orders       Orders[]     @relation("order-user")
  Invoice      Invoice[]    @relation("invoice-user")
  Minio        Minio[]      @relation("minio-user")
  Cart         Cart[]       @relation("cart-user")

  @@index([email])
}

model Customers {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String?
  firmName    String
  avatar      String? // guid tutulacak burada o guid yi minio dan eşleştiricez // default avatar eklenecek
  description String?
  address     String?
  userId      Int
  user        Users    @relation(fields: [userId], references: [id], name: "customer-user", onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Orders      Orders[] @relation("order-customer")

  @@index([userId])
}

model Categories {
  id        Int        @id @default(autoincrement())
  name      String
  userId    Int
  user      Users      @relation(fields: [userId], references: [id], name: "category-user", onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Products  Products[] @relation("product-category")

  @@index([userId])
}

model States {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], name: "state-user", onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[] @relation("order-state")

  @@index([userId])
}

model CustomInputs {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  productId Int
  product   Products @relation(fields: [productId], references: [id], name: "custom-input-product", onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Products {
  id            Int             @id @default(autoincrement())
  image         String
  title         String
  categoryId    Int
  category      Categories      @relation(fields: [categoryId], references: [id], name: "product-category", onDelete: Cascade)
  price         Float
  stock         Int
  description   String          @default("")
  variant       String
  customInputs  CustomInputs[]  @relation("custom-input-product")
  userId        Int
  user          Users           @relation(fields: [userId], references: [id], name: "product-user", onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Order_Product Order_Product[] @relation("order-product-product")
  Cart          Cart[]          @relation("cart-product")

  @@index([userId])
}

model Orders {
  id            Int             @id @default(autoincrement())
  stateId       Int
  state         States          @relation(fields: [stateId], references: [id], name: "order-state", onDelete: Cascade)
  variant       String
  customerId    Int
  customer      Customers       @relation(fields: [customerId], references: [id], name: "order-customer", onDelete: Cascade)
  userId        Int
  user          Users           @relation(fields: [userId], references: [id], name: "order-user", onDelete: Cascade)
  Invoice       Invoice[]       @relation("invoice-order")
  Order_Product Order_Product[] @relation("order-product-order")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Order_Product {
  id        Int      @id @default(autoincrement())
  quantity  Int
  orderId   Int
  order     Orders   @relation(fields: [orderId], references: [id], name: "order-product-order", onDelete: Cascade)
  productId Int
  product   Products @relation(fields: [productId], references: [id], name: "order-product-product", onDelete: Cascade)
}

model Invoice {
  id        Int      @id @default(autoincrement())
  fileName  String
  proforma  String
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], name: "invoice-user", onDelete: Cascade)
  orderId   Int
  order     Orders   @relation(fields: [orderId], references: [id], name: "invoice-order", onDelete: Cascade)
  file      Minio    @relation(fields: [fileId], references: [id], name: "invoice-file", onDelete: Cascade)
  fileId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int      @id @default(autoincrement())
  productId Int
  products  Products @relation(fields: [productId], references: [id], name: "cart-product", onDelete: Cascade)
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], name: "cart-user", onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Minio {
  id       Int       @id @default(autoincrement())
  fileName String
  mimeType String
  userId   Int
  user     Users     @relation(fields: [userId], references: [id], name: "minio-user", onDelete: Cascade)
  Invoice  Invoice[] @relation("invoice-file")
}
